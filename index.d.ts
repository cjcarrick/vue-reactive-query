import { RouteLocationNormalizedLoaded, Router } from 'vue-router';
import { Ref } from 'vue';
export default class ReactiveQuery<Refs extends {
    [U: string]: Ref<boolean> | Ref<string> | Ref<string[]> | Ref<number>;
}, ShortNames extends {
    [U in keyof Refs]: string;
}, Defaults extends {
    [U in keyof Refs]: boolean | string | string[] | number;
}> {
    private route;
    private router;
    refs: Refs;
    /** A mapping of the shortened identifiers generated by .minifyIdentifiers().
     *
     * This will be an empty object if you haven't called .minifyIdentifiers()
     * yet.
     *
     */
    names: ShortNames;
    defaults: Defaults;
    constructor(args: {
        router: Router;
        route: RouteLocationNormalizedLoaded;
    });
    /**
     * Usage:
     * ```
     * const query = new ReactiveQuery()
     *   .createBooleanParam('happy', true)
     *   // ...define more params
     *
     *   .minifyIdentifiers()
     *
     * const shortNames = query.names
     * ```
     */
    minifyIdentifiers: () => this;
    /** Returns the value of the query param from the current URL. */
    private fromUrl;
    private setQuery;
    createStringListParam: <Name extends string, Result extends ReactiveQuery<Refs & { [k in Name]: Ref<string[]>; }, ShortNames & { [k_1 in Name]: string; }, Defaults & { [k_2 in Name]: string[]; }>>(name: Name, defaultValue: string[], allowedValues?: string[]) => Result;
    createStringParam: <Name extends string, AllowedValues extends string[], Result extends ReactiveQuery<Refs & { [k in Name]: Ref<string>; }, ShortNames & { [k_1 in Name]: string; }, Defaults & { [k_2 in Name]: string; }>>(name: Name, defaultValue: AllowedValues[number], allowedValues?: AllowedValues | undefined) => Result;
    /**
     * This technically works with floats too, but it converts strings to base-36
     * to save space. Use .createFloatParam() if you want to leave them in base 10.
     */
    createIntParam: <Name extends string, Result extends ReactiveQuery<Refs & { [k in Name]: Ref<number>; }, ShortNames & { [k_1 in Name]: string; }, Defaults & { [k_2 in Name]: number; }>>(name: Name, defaultValue: number) => Result;
    /**
     * This technically works with floats too, but it converts strings to base-36
     * to save space. Use .createFloatParam() if you want to leave them in base 10.
     */
    createFloatParam: <Name extends string, Result extends ReactiveQuery<Refs & { [k in Name]: Ref<number>; }, ShortNames & { [k_1 in Name]: string; }, Defaults & { [k_2 in Name]: number; }>>(name: Name, defaultValue: number) => Result;
    createBooleanParam: <Name extends string, Result extends ReactiveQuery<Refs & { [k in Name]: Ref<boolean>; }, ShortNames & { [k_1 in Name]: string; }, Defaults & { [k_2 in Name]: boolean; }>>(name: Name, defaultValue: boolean) => Result;
}
//# sourceMappingURL=index.d.ts.map